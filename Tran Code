#include <iostream>
#include <cstdlib>
#include <cmath>
#include <fstream>

const int CONVERSION_KM = 111;

double coordinate_conversion (double & latitude, double & longitude)
{
	double latitude_in_km = latitude*CONVERSION_KM;
	double longitude_rad = longitude*M_PI/180;
	double longitude_in_km = CONVERSION_KM*cos(longitude_rad);
}

double coord_dist (double x_coord_1, double y_coord_1, double x_coord_2, double y_coord_2)
{
	double point_dist = sqrt(pow(x_coord_2 - x_coord_1,2) + pow(y_coord_2 - y_coord_1,2));
	return point_dist;
}

bool spill_overlap (double spill_x_1, double spill_y_1, double spill_x_2, double spill_y_2, double radius_1, double radius_2)
{
	double spill_dist = coord_dist (spill_x_1, spill_y_1, spill_x_2, spill_y_2);
	if (spill_dist <= (radius_1 + radius_2));
		return 1;
	return 0;
}

bool location_position_to_spill (double spill_radius, double spill_x, double spill_y, double location_x, double location_y)
{
	double point_spill_dist = coord_dist (spill_x, spill_y, location_x, location_y);
	if (point_spill_dist <= spill_radius)
		return 1;
	return 0;	
}

using namespace std;
int main ()
{
	ifstream fin_spill ("spill.txt");
	ifstream fin_location ("location.txt");
	
	if (!fin_spill || !fin_location)
	{
		cout << "Failed to open file.";
		return EXIT_FAILURE;
	}
	
	const int MAX_SPILL = 10;
	
	int spill_count = 0;
	fin_spill >> spill_count;
	double spill_latitude [MAX_SPILL] = {0};
	double spill_longitude [MAX_SPILL] = {0};
	double spill_radius_data [MAX_SPILL] = {0};
	for (int index = 0; index < spill_count; index++)
	{
		fin_spill >> spill_latitude [index] >> spill_longitude [index] >> spill_radius_data [index];
	}
	
	string location_name = "";
	double location_latitude = 0;
	double location_longitude = 0;
	int spill_overlap_num = 0;
	while (fin_location >> location_name)
	{
		fin_location >> location_latitude >> location_longitude;
		//Establish spill x-coordinates, y-coordinates, radius that are impossible to intersect with any of the file's spills.
		double previous_spill_x = 100000; 
		double previous_spill_y = 100000;
		double previous_spill_radius = -1;
		int location_in_spill = 0;
		double location_x_km = location_latitude;
		double location_y_km = location_longitude;
			
		for (int read_index = 0; read_index < MAX_SPILL; read_index++)
		{
			double spill_x_km = spill_latitude [read_index];
			double spill_y_km = spill_longitude [read_index];
			double spill_radius_km = spill_radius_data [read_index];
			coordinate_conversion (location_x_km, location_y_km);
			coordinate_conversion (spill_x_km, spill_y_km);
			
			if (location_position_to_spill (spill_radius_km, spill_x_km, spill_y_km, location_x_km, location_y_km))
				location_in_spill++;
			if (spill_overlap (previous_spill_x, previous_spill_y, spill_x_km, spill_y_km, previous_spill_radius, spill_radius_km))
			{
				spill_overlap_num++;
				previous_spill_x = spill_x_km;
				previous_spill_y = spill_y_km;
				previous_spill_radius = spill_radius_km;
			}
		}
		cout << location_name << "is affected by " << location_in_spill << " spills." << endl;
	}
	cout << "There will be a total of " << spill_overlap_num << " reactions." << endl;
	
	fin_spill.close();
	fin_location.close();
	system ("PAUSE");
	return EXIT_SUCCESS;
}
